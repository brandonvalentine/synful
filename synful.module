<?php
// $Id$
/**
 * @file synful.module
 * Attaches a Symfony application to the Drupal menu structure and renders Symfony actions as part of a Drupal site.
 */

/**
 * Import symfony classes if we're not at the drush command line
 */
if (!defined('STDIN')) require_once($_SERVER['DOCUMENT_ROOT'] . $GLOBALS['base_path'] . variable_get('synful_symfony_path', '../symfony') . '/config/ProjectConfiguration.class.php');

/**
 * Implementation of hook_help().
 */
function synful_help($path, $arg) {
  switch ($path) {
    case 'admin/help#synful':
      return t('Attaches a Symfony application to the Drupal menu structure and renders Symfony actions as part of a Drupal site.');
    // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}


/**
 * Implementation of hook_menu().
 */
function synful_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['admin/settings/synful'] = array(
    'title' => 'Synful',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('synful_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return array_merge($items, synful_get_menu());
}

/**
 * Implementation of hook_block().
 */
function synful_block($op='list', $delta=0, $edit=array()) {
  switch($op) {
    case 'list':
      $blocks[0]['info'] = t('Synful Debug Info');
      return $blocks;
    case 'view':
      $blocks['subject'] = t('Synful Debug Info');
      $blocks['content'] = print_r(menu_tree_all_data(), true);
  }
  return $blocks;
}

/**
 * Admin settings form.
 */
function synful_settings() {

  $form['#submit'][] = 'synful_refresh_menu';

  // Textfield for symfony_app
  $form['synful_symfony_app'] = array(
    '#type' => 'textfield',
    '#title' => t('Symfony app'),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t('The symfony app to which you would like to proxy routes'),
    '#default_value' => variable_get('synful_symfony_app', 'frontend'),
  );

  // Textfield for symfony_path
  $form['synful_symfony_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Symfony path'),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t('The path to your symfony application relative to the Drupal document root'),
    '#default_value' => variable_get('synful_symfony_path', '../symfony'),
  );

  // Textfield for route_prefix
  $form['synful_route_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Symfony route prefix'),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t('Drupal menu root at which to attach symfony routes'),
    '#default_value' => variable_get('synful_route_prefix', ''),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_boot()
 * Bootstrap Symfony
 */
function synful_boot() {
  if (!defined('STDIN')) {
    $configuration = ProjectConfiguration::getApplicationConfiguration(variable_get('synful_symfony_app', 'frontend'), 'dev', true);
    sfContext::createInstance($configuration, 'synful');
  }
}  

function synful_get_menu() {
  $items = array();
  if (!sfContext::hasInstance('synful')) synful_boot();
  foreach(sfContext::getInstance('synful')->getRouting()->getRoutes() as $name => $route) {
    if(!strpos($route->getPattern(), ':') && $route->getPattern() != '/') {
      $items[variable_get('synful_route_prefix', '') . preg_replace('/^\//', '', $route->getPattern())] = array(
        'title' => $name,
        'page callback' => 'synful_get_content',
        'page arguments' => array($route->getPattern()),
        'access arguments' => array('access content'),
      );
    }
  }
  return $items;
}

function synful_clear_menu() {
  foreach(menu_tree_all_data() as $navitem) {
    if($navitem['link']['page_callback'] == 'synful_get_content') {
      _menu_delete_item(db_fetch_array(db_query("SELECT * FROM {menu_links} WHERE mlid = %d", $navitem['link']['mlid'])), TRUE);
    }
  }
}

function synful_refresh_menu() {
  synful_clear_menu();
  menu_rebuild();
}
    

function synful_get_content($route = '/') {
  $controller = sfContext::getInstance('synful')->getController();
  $controller->setRenderMode(sfView::RENDER_VAR);
  $controller->dispatch();
  return $controller->getActionStack()->getLastEntry()->getPresentation();
}
